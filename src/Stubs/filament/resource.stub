<?php

namespace App\Filament\Resources;

use App\Filament\Resources\{{ class }}\Pages;
use App\Filament\Resources\{{ class }}\RelationManagers;
use App\Models\{{ model }};
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\Hash;

class {{ class }} extends Resource
{
    protected static ?string $model = {{ model }}::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    protected static ?string $navigationLabel = '{{ modelTitle }}s';

    protected static ?string $pluralModelLabel = '{{ modelTitle }}s';

    protected static ?string $modelLabel = '{{ modelTitle }}';

    protected static ?string $navigationGroup = 'GestiÃ³n';

    protected static ?int $navigationSort = 1;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('InformaciÃ³n Principal')
                    ->description('Completa los datos bÃ¡sicos del {{ modelLowerCase }}')
                    ->schema([
                        {{ formFields }}
                    ])
                    ->columns(2)
                    ->collapsible(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                {{ tableColumns }}
            ])
            ->filters([
                Tables\Filters\TrashedFilter::make(),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    Tables\Actions\ForceDeleteBulkAction::make(),
                    Tables\Actions\RestoreBulkAction::make(),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make(),
            ])
            ->defaultSort('id', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            {{ relationManagers }}
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\List{{ model }}s::route('/'),
            'create' => Pages\Create{{ model }}::route('/create'),
            'view' => Pages\View{{ model }}::route('/{record}'),
            'edit' => Pages\Edit{{ model }}::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }

    public static function getGlobalSearchEloquentQuery(): Builder
    {
        return parent::getGlobalSearchEloquentQuery()->with([]);
    }

    public static function getGloballySearchableAttributes(): array
    {
        return ['name']; // Personalizar segÃºn el modelo
    }

    public static function getGlobalSearchResultDetails($record): array
    {
        return [
            'ID' => $record->id,
        ];
    }
}